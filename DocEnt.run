param maq1 := 3; #DOCAS ENTRADA
param maq2 := 4; #DOCAS SAIDA
param nv1 := 15; #CAMINHOES ENTRADA
param nv2 := 10; #CAMINHOES SAIDA
param S{i in 1..nv2, j in 1..nv1}; #DEPENDENCIA CAMINHAO SAIDA-ENTRADA
param p1{i in 1..nv1}; #TEMPO DESCARGA
param p2{i in 1..nv2}; #TEMPO CARGA
param d{i in 1..nv2};  #DATA LIMITE PARA SAIR DO CDC
param w{i in 1..nv2};  #IMPORTANCIA DO CAMINHAO DE SAIDA
param r{i in 1..nv1};  #DATA DE CHEGADA DO CAMINHAO DE ENTRADA

let {i in 1..nv2, j in 1..nv1} S[i,j] := round(Uniform01());
let {j in 1..nv1} p1[j] := round(Uniform(1,nv1*2));
let {i in 1..nv2} p2[i] := round(1.3*Uniform(1,nv2*2));
let {i in 1..nv2} w[i] := round(2*Uniform(1,nv2));
let {j in 1..nv1} r[j] := round((0.2*Uniform01())*(sum{i in 1..nv1}p1[i] + sum{i in 1..nv2}p2[i]));
let {i in 1..nv2} d[i] := round((0.25 + Uniform01())*(sum{j in 1..nv1}p1[j] + sum{j in 1..nv2}p2[j]  + max{j in 1..nv1}r[j]));


display maq1;
display maq2;
display nv1;
display nv2;
display S;
display p1;
display p2;
display w;
display r;
display d;

########################################################################################

#CONJUNTOS
set I := {1..nv1}; #Caminhões de entrada, que devem ser descarregados na maq1
set J := {1..nv2}; #Caminhões de saída, que devem ser carregados na maq2
display I;
display J;

param ind; #indice relativo a data de chegada
param doca1;  #quantidade docas de entrada
param saida; #para verificar saida
param time; #relógio para contabilizar o tempo
param cont_doca; #utilizado para contar quantos valores no vetor tempo estão preenchidos
param cont_full; #utilizado para contar quantos valores no vetor tempo não estão preenchidos
param docasocupadas; #docas ocupadas
param menortempo; #para analisar qual tem menor tempo de chegada
param docaslivres; #para analisar as docas livres
param totaldocas; #o total de docas de entrada
param coluna; #utilizado para ver se a coluna na matriz está toda zerada

param ind2; #indice relativo a data de chegada
param doca2;  #quantidade docas de entrada
param saida2; #para verificar saida
param cont_doca2; #utilizado para contar quantos valores no vetor tempo estão preenchidos
param cont_full2; #utilizado para contar quantos valores no vetor tempo não estão preenchidos
param docasocupadas2; #docas ocupadas
param menortempo2; #para analisar qual tem menor tempo de data limite
param docaslivres2; #para analisar as docas livres
param totaldocas2; #o total de docas de saida
param indice;
param docas_in{i in 1..maq1}; #docas de entrada
param docas_in_ind{i in 1..maq1}; #indice das docas de entrada
param docas_out{i in 1..maq2}; #docas de saida
param docas_out_ind{i in 1..maq2}; #indice das docas de saida
param docas_esp{i in 1..nv2}; #para analisar quem já pode carregar, porque os caminhões referentes foram descarregados
param docas_esp_ind{i in 1..nv2}; #indice relativo a quem já pode carregar

let saida:= 0;
let time:= 1;
let cont_doca:= 0;
let cont_full:= 100;
let docaslivres:=1;
let coluna := 0;

let saida2:= 0;
let cont_doca2:= 0;
let cont_full2:= 100;
let docaslivres2:=1;

let {i in 1..maq1} docas_in[i] := 0;  #todos começam com zero
let {i in 1..maq1} docas_in_ind[i] := 0;  #todos começam com zero
let {i in 1..maq2} docas_out[i] := 0;  #todos começam com zero
let {i in 1..maq2} docas_out_ind[i] := 0;  #todos começam com zero
let {i in 1..nv2} docas_esp[i] := 1000;  #todos começam com valor alto, porque vou ter que utilizar minimo e zero atrapalharia
let {i in 1..nv2} docas_esp_ind[i] := 0; #todos começam com zero

let doca1 := maq1; #quantidade de docas
let totaldocas := maq1; #quantidade de docas
let docasocupadas := doca1 - 1; #utilizado quando tem uma doca disponível

let doca2 := maq2; #quantidade de docas
let totaldocas2 := maq2; #quantidade de docas
let docasocupadas2 := doca2 - 1; #utilizado quando tem uma doca disponível

repeat while saida1 == 0 #repetir enquanto saida for igual a 0
{
	for{j in 1..nv1}
	{	
		let menortempo := min{jj in 1..nv1}r[jj];	
		if r[j] <= time then
		{
			if doca1 > 0 then #verificar se a doca está disponível
			{
				if r[j] == menortempo then{
				display r[j];
				let ind := j; #caminhão com a menor data de chegada
				display ind;
			
				for{i in 1..maq1}
				{
					if docas_in[i] == 0 then #tempo que o caminhão gasta p/ descarregar
					{
						let docas_in[i] := p1[ind];
						let docas_in_ind[i] := ind;
						break;
					}
				}
				let cont_full:= 0;
					
				let doca1 := doca1 - 1; #doca foi ocupada
				let r[ind]:= 1000; #se entrou na doca irá receber indice grande para não entrar novamente
				display doca1;	
				}
			}
			if doca1 == 0 then #quando não tem mais docas disponíveis
			{
				
				if cont_doca > 0 && cont_doca <= docasocupadas then #quando tem uma doca disponível
				{
					let doca1:= doca1 + docaslivres; #tem uma livre então adiciona
					display doca1;
					let cont_doca:= 0; #zerar porque foi preenchida
				}
				else
				{
					let cont_doca:= 0; 
					let cont_full:= 0;
					let docaslivres := 0;
					for{i in 1..maq1}
					{
						if docas_in[i] != 0 then #quantos valores tem diferente de 0
						{
							let cont_doca:= cont_doca + 1; #se o valor no vetor tempo não for zero, conta a doca
							let docaslivres := totaldocas - cont_doca;	
						}
					}
				}
			}
		}
		if cont_full != 100 then
		{
			let cont_full:= 0;
			for{i in 1..maq1}
			{
				if docas_in[i] == 0 then #quantos valores tem diferente de 0
				{
					let cont_full:= cont_full + 1; #se o valor no vetor tempo for zero
				}
			}
			if cont_full == maq1 then #quando todo o vetor tempo for 0
			{
				let saida:= 1;
			}
		}
	}
	for{i in 1..maq1}
	{
		if docas_in[i] == 0 then #tempo que o caminhão gasta p/ descarregar
		{			
			let docas_in_ind[i] := 0;
		}
	}
	display docas_in;
	display docas_in_ind;
	for{i in 1..maq1}
	{
		if docas_in[i] != 0 then #utilizado reduzir o tempo no descarregamento
		{
			let docas_in[i]:= docas_in[i] - 1;
			if docas_in[i] == 0 then
			{	
				for {ii in 1..nv2} #para zerar na matriz quando estiver descarregado
				{
					if S[ii, docas_in_ind[i]] == 1 then
					{
						let S[ii, docas_in_ind[i]] := 0;
					}
				}
			display S;
			}
		}
	}
	let time:= time + 1; #utilizado para passar o tempo
	display time;
	
	for {jj in 1..nv2} #para detectar qual coluna da matriz S está toda zerada
	{
		for{j in 1..nv1}
		{
			if S[jj, j] == 0 then
			{
				let coluna := coluna + 1;
				if coluna == nv1 then
				{
					for{i in 1..nv2} 
					{
						if docas_esp[i] == 1000 then 
						{
							let docas_esp[i] := d[jj];
							let docas_esp_ind[i] := jj;
							let menortempo2 := min{ii in 1..nv2}docas_esp[ii];
							break;
						}
					}
				}
			}	
		} let coluna := 0 ; 
	} 
	display docas_esp;
	display docas_esp_ind;
	for{j in 1..nv2}
	{
		if docas_esp[j] != 1000 then
		{									
			for{ii in 1..nv2}
			{	
				if doca2 > 0 then #verificar se a doca está disponível
				{
					if d[ii] == menortempo2 then
					{
						display d[ii];
						let ind2 := ii; #caminhão com a menor data de chegada
						display ind2;
						for{i in 1..maq2}
						{
							if docas_out[i] == 0 then #tempo que o caminhão gasta p/ descarregar
							{
								let docas_out[i] := p2[ind2];
								let docas_out_ind[i] := ind2;
								break;
							}
						}
						
						let cont_full2:= 0;
						display 'AAAAAAAAA'; 	
						let doca2 := doca2 - 1; #doca foi ocupada
						let d[ii]:= 1000; #se entrou na doca irá receber indice grande para não entrar novamente
						display doca2;	
					}
				}
				if doca2 == 0 then #quando não tem mais docas disponíveis
				{
					
					if cont_doca2 > 0 && cont_doca2 <= docasocupadas2 then #quando tem uma doca disponível
					{
						let doca2:= doca2 + docaslivres2; #tem uma livre então adiciona
						display doca2;
						let cont_doca2 := 0; #zerar porque foi preenchida
					}
					else
					{
						let cont_doca2 := 0; 
						let docaslivres2 := 0;
						for{i in 1..maq2}
						{
							if docas_out[i] != 0 then #quantos valores tem diferente de 0
							{
								let cont_doca2:= cont_doca2 + 1; #se o valor no vetor tempo não for zero, conta a doca
								let docaslivres2 := totaldocas2 - cont_doca2;	
							}
						}
					}
				}
				if cont_full2 != 100 then
				{
					let cont_full2:= 0;
					for{i in 1..maq2}
					{
						if docas_out[i] == 0 then #quantos valores tem diferente de 0
						{
							let cont_full2:= cont_full2 + 1; #se o valor no vetor tempo for zero
						}
					}
					if cont_full2 == nv2 then #quando todo o vetor de tempo for 0
					{
						let saida2:= 1;
					}
				}
			}
			for{i in 1..maq2} 
			{
				if docas_out[i] == 0 then 
				{			
					let docas_out_ind[i] := 0;
				}
			}
			display docas_out;
			display docas_out_ind;
			for{i in 1..maq2}
			{
				if docas_out[i] != 0 then #utilizado reduzir o tempo no descarregamento
				{
					let docas_out[i]:= docas_out[i] - 1;
					display docas_out;
				}
			} 
		}
	}
}



